##############################
# Democratic Election Faction
##############################
# Democratic Election factions will briefly exist during
# democratic elections to allow for multiple choices
# if only Loyalists exist.

democratic_election_faction = {
	election_header = "GFX_faction_header_yellow"
	lose_support_on_pop_leave = no

	parameters = {
		empire = {
			type = country
			valid_objects = {
				is_same_value = root
			}
		}
	}

	on_create = {
		set_name = random
	}

	is_dangerous = {
		always = no
	}
	
	hidden = yes
	
	attraction = {
		base = 0
		
		modifier = {
			add = 999
			
			exists = pop_faction
			pop_faction = {
				is_pop_faction_type = democratic_election_faction
			}
		}

		modifier = {
			factor = 0
			is_slavebot = yes
		}
	}
	
	mandate = {
		key = "mandate_emancipation2"
		parameter_transfer = {}
		weight = {
			base = 20

			modifier = {
				factor = 0.3
				parameter:empire = {
					any_owned_leader = {
						leader_of_faction = yes
						has_mandate = "mandate_emancipation2"
					}
				}
			}
		}
	}

	mandate = {
		key = "mandate_miner"
		parameter_transfer = {}
		weight = {
			base = 20

			modifier = {
				factor = 0.3
				parameter:empire = {
					any_owned_leader = {
						leader_of_faction = yes
						has_mandate = "mandate_miner"
					}
				}
			}
		}
	}

	mandate = {
		key = "mandate_orbital_researcher"
		parameter_transfer = {}
		weight = {
			base = 20

			modifier = {
				factor = 0.3
				parameter:empire = {
					any_owned_leader = {
						leader_of_faction = yes
						has_mandate = "mandate_orbital_researcher"
					}
				}
			}
		}
	}

	mandate = {
		key = "mandate_slaver"
		parameter_transfer = {}
		weight = {
			base = 20

			modifier = {
				factor = 0.3
				parameter:empire = {
					any_owned_leader = {
						leader_of_faction = yes
						has_mandate = "mandate_slaver"
					}
				}
			}

			modifier = {
				factor = 0
				parameter:empire = {
					OR = {
						has_ethic = ethic_individualist
						has_ethic = ethic_fanatic_individualist
					}
				}
			}
		}
	}
	
	mandate = {
		key = "mandate_shipwright"
		parameter_transfer = {}
		weight = {
			base = 20

			modifier = {
				factor = 0.3
				parameter:empire = {
					any_owned_leader = {
						leader_of_faction = yes
						has_mandate = "mandate_shipwright"
					}
				}
			}

			modifier = {
				factor = 1.5
				parameter:empire = {
					used_naval_capacity_percent < 0.3
				}
			}

			modifier = {
				factor = 0
				parameter:empire = {
					OR = {
						has_ethic = ethic_pacifist
						has_ethic = ethic_fanatic_pacifist
						used_naval_capacity_percent > 0.5
						#max_naval_capacity > 500
					}
				}
			}
		}
	}

	# If only primary species rulers allowed,
	# will attempt to find or generate a primary-species leader
	# If xeno leaders allowed,
	# will attempt to find or generate a non-robot leader
	# If robot leaders allowed,
	# will attempt to find or generate a primary-species or robot leader
	# If all leaders allowed,
	# will attempt to find or generate whatever leader
	on_set_leader = {
		owner = {
			if = {
				limit = {
					has_policy_flag = leadership_allow_dominant_only
				}
				if = {
					limit = {
						any_owned_leader = {
							leader_of_faction = no
							is_same_species = owner_species
						}
					}
					random_owned_leader = {
						limit = {
							leader_of_faction = no
							is_same_species = owner_species
						}
						root = {
							assign_leader = prev
						}
					}
					else = {
						create_leader = {
							type = random
							species = owner_species
							name = random
							skill = random
							traits = { 
								trait = random_trait
								trait = random_trait
							}
						}
						last_created_leader = {
							set_leader_flag = temp_election_leader
							recruitable = no
							root = {
								assign_leader = prev
							}
						}
					}
				}
				break = yes
			}

			if = {
				limit = {
					has_policy_flag = leadership_allow_xeno
				}
				if = {
					limit = {
						any_owned_leader = {
							leader_of_faction = no
							NOT = {
								is_same_species = "ROBOT_POP_SPECIES_3"
							}
						}
					}
					random_owned_leader = {
						limit = {
							leader_of_faction = no
							NOT = {
								is_same_species = "ROBOT_POP_SPECIES_3"
							}
						}
						root = {
							assign_leader = prev
						}
					}
					else = {
						random_owned_pop = {
							limit = {
								NOT = {
									is_same_species = "ROBOT_POP_SPECIES_3"
								}
							}
							species = {
								save_event_target_as = xenoMain
							}
						}
						create_leader = {
							type = random
							species = event_target:xenoMain
							name = random
							skill = random
							traits = { 
								trait = random_trait
								trait = random_trait
							}
						}
						last_created_leader = {
							set_leader_flag = temp_election_leader
							recruitable = no
							root = {
								assign_leader = prev
							}
						}
					}
				}
				break = yes
			}

			if = {
				limit = {
					has_policy_flag = leadership_allow_robot
				}
				if = {
					limit = {
						any_owned_leader = {
							leader_of_faction = no
							OR = {
								is_same_species = owner_species
								is_same_species = "ROBOT_POP_SPECIES_3"
							}
						}
					}
					random_owned_leader = {
						limit = {
							leader_of_faction = no
							OR = {
								is_same_species = owner_species
								is_robot = yes
							}
						}
						root = {
							assign_leader = prev
						}
					}
					else = {
						random_owned_pop = {
							limit = {
								OR = {
									is_same_species = owner_species
									is_same_species = "ROBOT_POP_SPECIES_3"
								}
							}
							species = {
								save_event_target_as = robotMain
							}
						}
						create_leader = {
							type = random
							species = event_target:robotMain
							name = random
							skill = random
							traits = { 
								trait = random_trait
								trait = random_trait
							}
						}
						last_created_leader = {
							set_leader_flag = temp_election_leader
							recruitable = no
							root = {
								assign_leader = prev
							}
						}
					}
				}
				break = yes
			}

			if = {
				limit = {
					has_policy_flag = leadership_allow_all
				}
				if = {
					limit = {
						any_owned_leader = {
							leader_of_faction = no
						}
					}
					random_owned_leader = {
						limit = {
							leader_of_faction = no
						}
						root = {
							assign_leader = prev
						}
					}
					else = {
						random_owned_pop = {
							species = {
								save_event_target_as = random_species
							}
						}
						create_leader = {
							type = random
							species = event_target:random_species
							name = random
							skill = random
							traits = { 
								trait = random_trait
								trait = random_trait
							}
						}
						last_created_leader = {
							set_leader_flag = temp_election_leader
							recruitable = no
							root = {
								assign_leader = prev
							}
						}
					}
				}
				break = yes
			}
		}
	}
}